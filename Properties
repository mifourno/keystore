/* ----------------------------------------------------------
Properties.gs -- 
Copyright (C) 2015 Mifourno

This software may be modified and distributed under the terms
of the MIT license.  See the LICENSE file for details.

GitHub: https://github.com/mifourno/keystore/
Contact: mifourno@gmail.com

DEPENDENCIES:
- Encryption.gs
- Menu.gs
- Properties.gs
- Utils.gs
- Locking.gs
- CryptoJSWrapper.gs
- CryptoJS Files:
    => CryptoJS_aes.gs
---------------------------------------------------------- */

// ################ User Properties #################
function getP_PEK() { return PropertiesService.getUserProperties().getProperty('PEK'); }
function setP_PEK(value) { PropertiesService.getUserProperties().setProperty('PEK', value); }

function getP_EEK() { return PropertiesService.getUserProperties().getProperty('EEK'); }
function setP_EEK(value) { PropertiesService.getUserProperties().setProperty('EEK', value); }

function getP_LastUpdate() { return PropertiesService.getUserProperties().getProperty('LastUpdate'); }
function setP_LastUpdate(value) { PropertiesService.getUserProperties().setProperty('LastUpdate', value); }

function getP_LockedAt() { return PropertiesService.getUserProperties().getProperty('LockedAt'); }
function setP_LockedAt(value) { PropertiesService.getUserProperties().setProperty('LockedAt', value); }

// ################ Script Properties #################
function getP_ProgramName() { return PropertiesService.getScriptProperties().getProperty('ProgramName'); }
function setP_ProgramName(value) { PropertiesService.getScriptProperties().setProperty('ProgramName', value); }

function getP_ProtectionMessage() { return PropertiesService.getScriptProperties().getProperty('ProtectionMessage'); }
function setP_ProtectionMessage(value) { PropertiesService.getScriptProperties().setProperty('ProtectionMessage', value); }

// ################ Document Properties #################
function getP_RevealedRangeSheets() { return PropertiesService.getDocumentProperties().getProperty('RevealedRangeSheets'); }
function setP_RevealedRangeSheets(value) { PropertiesService.getDocumentProperties().setProperty('RevealedRangeSheets', value); }

function getP_AutolockDelay() { return Number(PropertiesService.getDocumentProperties().getProperty('AutolockDelay')); }
function setP_AutolockDelay(value) { PropertiesService.getDocumentProperties().setProperty('AutolockDelay', value); }

function getP_SetFormatAtEncryption() { return (PropertiesService.getDocumentProperties().getProperty('SetFormatAtEncryption') === 'true'); }
function setP_SetFormatAtEncryption(value) { PropertiesService.getDocumentProperties().setProperty('SetFormatAtEncryption', value); }

function getP_GenPassPuntuations() { return PropertiesService.getDocumentProperties().getProperty('GenPassPuntuations'); }
function setP_GenPassPuntuations(value) { PropertiesService.getDocumentProperties().setProperty('GenPassPuntuations', value); }

function getP_GenPassSymbols() { return PropertiesService.getDocumentProperties().getProperty('GenPassSymbols'); }
function setP_GenPassSymbols(value) { PropertiesService.getDocumentProperties().setProperty('GenPassSymbols', value); }

function getP_GenPassAlpha() { return PropertiesService.getDocumentProperties().getProperty('GenPassAlpha'); }
function setP_GenPassAlpha(value) { PropertiesService.getDocumentProperties().setProperty('GenPassAlpha', value); }

function getP_GenPassNum() { return PropertiesService.getDocumentProperties().getProperty('GenPassNum'); }
function setP_GenPassNum(value) { PropertiesService.getDocumentProperties().setProperty('GenPassNum', value); }

function getP_EncryptedFormat_BackGround() { return PropertiesService.getDocumentProperties().getProperty('EF_BG'); }
function setP_EncryptedFormat_BackGround(value) { PropertiesService.getDocumentProperties().setProperty('EF_BG', value); }

function getP_EncryptedFormat_Color() { return PropertiesService.getDocumentProperties().getProperty('EF_COL'); }
function setP_EncryptedFormat_Color(value) { PropertiesService.getDocumentProperties().setProperty('EF_COL', value); }

function getP_RevealedFormat_BackGround() { return PropertiesService.getDocumentProperties().getProperty('RF_BG'); }
function setP_RevealedFormat_BackGround(value) { PropertiesService.getDocumentProperties().setProperty('RF_BG', value); }

function getP_RevealedFormat_Color() { return PropertiesService.getDocumentProperties().getProperty('RF_COL'); }
function setP_RevealedFormat_Color(value) { PropertiesService.getDocumentProperties().setProperty('RF_COL', value); }

function getP_DecryptedFormat_BackGround() { return PropertiesService.getDocumentProperties().getProperty('DF_BG'); }
function setP_DecryptedFormat_BackGround(value) { PropertiesService.getDocumentProperties().setProperty('DF_BG', value); }

function getP_DecryptedFormat_Color() { return PropertiesService.getDocumentProperties().getProperty('DF_COL'); }
function setP_DecryptedFormat_Color(value) { PropertiesService.getDocumentProperties().setProperty('DF_COL', value); }


function initializeProperties(onlyIfNotExist)  { try  //for logging
{
  var userProperties = PropertiesService.getUserProperties();
  var scriptProperties = PropertiesService.getScriptProperties();
  var documentProperties = PropertiesService.getDocumentProperties();
  
  // User Properties
  initializePropertyIfNotExist(userProperties, 'PEK', '', onlyIfNotExist);
  initializePropertyIfNotExist(userProperties, 'EEK', '', onlyIfNotExist);
  initializePropertyIfNotExist(userProperties, 'LastUpdate', new Date(), onlyIfNotExist);
  initializePropertyIfNotExist(userProperties, 'LockedAt', new Date(), onlyIfNotExist);
  
  // Script Properties
  initializePropertyIfNotExist(scriptProperties, 'ProgramName', 'Keystore', onlyIfNotExist);
  initializePropertyIfNotExist(scriptProperties, 'ProtectionMessage', 'Marked as sensitive', onlyIfNotExist);
  
  // Document Properties
  initializePropertyIfNotExist(documentProperties, 'RevealedRangeSheets', '', onlyIfNotExist);
  initializePropertyIfNotExist(documentProperties, 'AutolockDelay', 3, onlyIfNotExist);
  initializePropertyIfNotExist(documentProperties, 'SetFormatAtEncryption', true, onlyIfNotExist);
  initializePropertyIfNotExist(documentProperties, 'GenPassPuntuations', ',.;:()[]{}/\\', onlyIfNotExist);
  initializePropertyIfNotExist(documentProperties, 'GenPassSymbols', '!#$%&*+-<=>?@^_|~', onlyIfNotExist);
  initializePropertyIfNotExist(documentProperties, 'GenPassAlpha', 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', onlyIfNotExist);
  initializePropertyIfNotExist(documentProperties, 'GenPassNum', '0123456789');
  
  initializePropertyIfNotExist(documentProperties, 'EF_BG', '#f4cccc', onlyIfNotExist);
  initializePropertyIfNotExist(documentProperties, 'EF_COL', '#990000', onlyIfNotExist);
  initializePropertyIfNotExist(documentProperties, 'RF_BG', '#fce5cd', onlyIfNotExist);
  initializePropertyIfNotExist(documentProperties, 'RF_COL', '#b45f06', onlyIfNotExist);
  initializePropertyIfNotExist(documentProperties, 'DF_BG', '#d9ead3', onlyIfNotExist);
  initializePropertyIfNotExist(documentProperties, 'DF_COL', '#38761d', onlyIfNotExist);
  
  syncLineThroughAndProtection();
  
//  var ss = SpreadsheetApp.getActiveSpreadsheet();
//  setProperty('Sheet' + 'Help' + 'Visible', !ss.getSheetByName('Help').isSheetHidden());
//  setProperty('Sheet' + 'Settings' + 'Visible', !ss.getSheetByName('Settings').isSheetHidden());
//  setProperty('Sheet' + 'Logs' + 'Visible', !ss.getSheetByName('Logs').isSheetHidden());
//  hideHelp();
//  hideSettings();
//  hideLogs();
  
} catch(e) { logError(e); throw(e); } } //for logging


function initializePropertyIfNotExist(propertySet, name, value, onlyIfNotExist)  { try  //for logging
{
  var propertyValue = propertySet.getProperty(name);
  if (!onlyIfNotExist || propertyValue === 'undefined' || propertyValue == null || propertyValue == '') propertySet.setProperty(name, value);
} catch(e) { logError(e); throw(e); } } //for logging

//function setProperty(name, value) { try  //for logging
//{
//  PropertiesService.getScriptProperties().setProperty(name, value);
//} catch(e) { logError(e); throw(e); } } //for logging
//
//function getProperty(name) { try  //for logging
//{
//  return PropertiesService.getScriptProperties().getProperty(name);
//} catch(e) { logError(e); throw(e); } } //for logging
//
//function getSetting(name)  { try  //for logging
//{
//  var settingsSheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName('Settings');
//  if (name == 'CopySensitivityFormat') return settingsSheet.getRange("CopySensitivityFormat").getValue() == 'copy these formats';
//  return settingsSheet.getRange(name).getValue();
//} catch(e) { logError(e); throw(e); } } //for logging
//
//function getSettingRange(name)  { try  //for logging
//{
//  var ss = SpreadsheetApp.getActiveSpreadsheet();
//  return ss.getSheetByName('Settings').getRange(name);
//} catch(e) { logError(e); throw(e); } } //for logging
